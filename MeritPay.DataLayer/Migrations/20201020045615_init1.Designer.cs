// <auto-generated />
using System;
using MeritPay.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeritPay.Infrastructure.Migrations
{
    [DbContext(typeof(MeritPayContext))]
    [Migration("20201020045615_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeritPay.Core.Entities.AdjustmentFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdjustmentFactor","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneCode")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branch","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.BranchGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdjustmentFactorId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("GroupingRatioId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentFactorId");

                    b.HasIndex("BranchId");

                    b.HasIndex("GroupingRatioId");

                    b.HasIndex("PeriodId");

                    b.ToTable("BranchGrouping","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.BranchGroupingInPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchGroupingId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Facilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("PublicSource")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BranchGroupingId");

                    b.HasIndex("PeriodId");

                    b.ToTable("BranchGroupingInPeriod","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.GroupingRatio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupingRatio","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.MeritPayFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeritPayTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeritPayTypeId");

                    b.HasIndex("PeriodId");

                    b.ToTable("MeritPayFactor","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.MeritPayLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxDay")
                        .HasColumnType("int");

                    b.Property<int>("MinDay")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("MeritPayLimit","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.MeritPayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeritPayType","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PeriodTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Period","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonCode")
                        .HasColumnType("int");

                    b.Property<string>("StudyBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyJob")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.PersonInBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("MoveDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonInBranch","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.PersonScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonInBranchId")
                        .HasColumnType("int");

                    b.Property<int>("RankInBank")
                        .HasColumnType("int");

                    b.Property<int>("RankInBranch")
                        .HasColumnType("int");

                    b.Property<int>("RankInZoze")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSubIndexId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonInBranchId");

                    b.HasIndex("ScoreSubIndexId");

                    b.ToTable("PersonScore","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeritPayFactorId")
                        .HasColumnType("int");

                    b.Property<int>("PersonInBranchId")
                        .HasColumnType("int");

                    b.Property<int>("RankInBank")
                        .HasColumnType("int");

                    b.Property<int>("RankInBranch")
                        .HasColumnType("int");

                    b.Property<int>("RankInZoze")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeritPayFactorId");

                    b.HasIndex("PersonInBranchId");

                    b.ToTable("Report","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.ScoreIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeritPayFactorId")
                        .HasColumnType("int");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeritPayFactorId");

                    b.ToTable("ScoreIndex","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.ScoreSubIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<int>("ScoreIndexId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScoreIndexId");

                    b.ToTable("ScoreSubIndex","MeritPay");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.BranchGrouping", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.AdjustmentFactor", "AdjustmentFactor")
                        .WithMany("BranchGrouping")
                        .HasForeignKey("AdjustmentFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.Branch", "Branch")
                        .WithMany("BranchGrouping")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.GroupingRatio", "GroupingRatio")
                        .WithMany("BranchGrouping")
                        .HasForeignKey("GroupingRatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.Period", "Period")
                        .WithMany("BranchGrouping")
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.BranchGroupingInPeriod", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.BranchGrouping", "BranchGrouping")
                        .WithMany("BranchGroupingInPeriod")
                        .HasForeignKey("BranchGroupingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.Period", "Period")
                        .WithMany("BranchGroupingInPeriod")
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("MeritPay.Core.Entities.MeritPayFactor", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.MeritPayType", "MeritPayType")
                        .WithMany("MeritPayFactor")
                        .HasForeignKey("MeritPayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.Period", "Period")
                        .WithMany("MeritPayFactor")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.MeritPayLimit", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.Period", "Period")
                        .WithMany("MeritPayLimit")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.PersonInBranch", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.Branch", "Branch")
                        .WithMany("PersonInBranch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.Person", "Person")
                        .WithMany("PersonInBranch")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.PersonScore", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.PersonInBranch", "PersonInBranch")
                        .WithMany("PersonScore")
                        .HasForeignKey("PersonInBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.ScoreSubIndex", "ScoreSubIndex")
                        .WithMany("PersonScore")
                        .HasForeignKey("ScoreSubIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.Report", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.MeritPayFactor", "MeritPayFactor")
                        .WithMany("Report")
                        .HasForeignKey("MeritPayFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeritPay.Core.Entities.PersonInBranch", "PersonInBranch")
                        .WithMany("Report")
                        .HasForeignKey("PersonInBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.ScoreIndex", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.MeritPayFactor", "MeritPayFactor")
                        .WithMany("ScoreIndex")
                        .HasForeignKey("MeritPayFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeritPay.Core.Entities.ScoreSubIndex", b =>
                {
                    b.HasOne("MeritPay.Core.Entities.ScoreIndex", "ScoreIndex")
                        .WithMany("ScoreSubIndex")
                        .HasForeignKey("ScoreIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
